services:
  web:
    build: .
    # image: rasterzoo/ecom:v0.0.4
    container_name: django_app
    # expose:
      # - "8000"
    networks:
      - app_network
    # command: ["./wait-for-it.sh", "db:5432","--", "uwsgi","--ini", "/app/config/uwsgi/uwsgi.ini"]
    # restart: always
    volumes:
      # - .:/app
      - /tmp:/tmp # share the /tmp directory for the socket
      - static_volume:/app/src/static # mount defined volume
    # env_file:
      # - .env # load the environment variables from .env
    depends_on:
      - db
      - redis
      - rabbitmq
    environment:
      - UWSGI_UID=33  # www-data uid
      - UWSGI_GID=33  # www-data gid

  db:
    image: postgres:17.2-alpine3.20
    # env_file:
      # - .env # load the environment variables from .env
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # environment:
      # - POSTGRES_DB=${POSTGRES_DB}
      # - POSTGRES_USER=${POSTGRES_USER}
      # - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - app_network

  redis:
    image: redis:7.2.6-alpine
    restart: always
    volumes:
      - ./data/redis:/data
    # env_file:
      # - .env
    # environment:
      # - REDIS_HOST=${REDIS_HOST}
      # - REDIS_PORT=${REDIS_PORT}
      # - REDIS_DB=${REDIS_DB}
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:4.0.3-management-alpine
    container_name: rabbitmq_server
    # ports:
      # - "5672:5672"
      # - "15672:15672"
    # environment:
      # RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      # RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    networks:
      - app_network

  celery_worker:
    # image: rasterzoo/ecom:v0.0.4
    build: .
    # command: celery -A project worker --loglevel=info
    working_dir: /app/src # sets the working directory containing manage.py
    # env_file:
      # - .env
    # user: ${CELERY_USER}
    depends_on:
      - web
      - rabbitmq
    networks:
      - app_network

  nginx:
    image: nginx:1.27.2-alpine
    container_name: webserver
    restart: always
    volumes:
      # - ./config/nginx/default.config.template:/etc/nginx/conf.d/default.conf
      # - .:/app
      - /tmp:/tmp # share the /tmp directory for the socket
      - static_volume:/app/src/static # mount defined volume
    # ports:
      # - "80:80"
    networks:
      - app_network

networks:
 app_network:
  driver: bridge

volumes:
 static_volume: # define the volume
 postgres_data: